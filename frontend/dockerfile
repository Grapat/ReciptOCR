# Stage 1: Build the React application
# Using a Node.js image to compile the React code
FROM node:20-alpine AS builder

# Set the working directory inside the container for the build process
WORKDIR /app

# Copy package.json and package-lock.json to leverage Docker's build cache
# This means npm install won't re-run if dependencies haven't changed
COPY package*.json ./

# Install Node.js dependencies
# Using --frozen-lockfile for production builds to ensure exact versions
RUN npm install --frozen-lockfile

# Copy the rest of your application source code
COPY . .

# Build the React application for production
# This command runs the 'build' script defined in your package.json
# Vite typically outputs to a 'dist' directory
RUN npm run build

# Stage 2: Serve with Nginx
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80

# Command to start Nginx in the foreground
# This is the default command for nginx:alpine, but explicitly stating it is good practice
CMD ["nginx", "-g", "daemon off;"]